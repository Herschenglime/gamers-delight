# -*- coding: utf-8 -*-
"""DSAProject3scratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BEHy5bWCu-WaNHbYlghXoaIQ39Thonxa
"""

import pandas as pd
import time

def quicksort(unsortedList, sortBy, Ascending = True):
  start = time.perf_counter()
  if Ascending:
    return quicksortrecursive(unsortedList, sortBy), (time.perf_counter() - start)
  else:
    sortedascend = quicksortrecursive(unsortedList, sortBy)
    sortedascend.reverse()
    end = time.perf_counter()
    return sortedascend, (end - start)

def quicksortrecursive(unsortedList, sortBy):
  greaterThan = []
  equalTo = []
  smallerThan = []
  if len(unsortedList) == 1 or len(unsortedList) == 0:
    return unsortedList
  else:
    pivotPoint = unsortedList[0][sortBy]
    for game in unsortedList:
      if game[sortBy] < pivotPoint:
        smallerThan.append(game)
      elif game[sortBy] == pivotPoint:
        equalTo.append(game)
      elif game[sortBy] > pivotPoint:
        greaterThan.append(game)    
    return quicksortrecursive(smallerThan, sortBy) + equalTo + quicksortrecursive(greaterThan, sortBy)

def rank_games(publisherGiven, publisherNum, developerGiven, developerNum, platformGiven, platformNum, genreGiven, genreNum, sortBy, sortAlg, Ascend):
  frame = pd.read_csv("api/Video_Games_Sales_as_at_22_Dec_2016 2.csv")
  frame = frame.fillna(-1)

  # make full list of games
  listOfData = []
  for i in range(frame.shape[0]):
    listOfData.append(frame.iloc[i])
  unsortedList = listOfData

  # make map of games (dict)
  nameList = []
  gameList = [] 
  for game in listOfData:
    nameList.append(str(game["Name"]))
    gameList.append(game)
  zippedFile = zip(nameList, gameList)
  gameMap = dict(zippedFile)

  outOfTotal = (publisherNum + developerNum + platformNum + genreNum)

  if outOfTotal == 0:
    if sortAlg == "quick":
      sortedGames = quicksort(unsortedList, sortBy, Ascend)
    elif sortAlg == "merge":
      a = 5
      #put in merge
    elif sortAlg == "shell":
      a = 5
      #put in shell
    
    return sortedGames


  similarGames = []
  for game in unsortedList:
    similarityScore = 0
    if (game["Publisher"] == publisherGiven):
      similarityScore += publisherNum
    if (game["Developer"] == developerGiven):
      similarityScore += developerNum
    if (game["Platform"] == platformGiven):
      similarityScore += platformNum
    if (game["Genre"] == genreGiven):
      similarityScore += genreNum
    
    if similarityScore/outOfTotal >= 0.70:
      game["Similarity Score"] = similarityScore/outOfTotal
      similarGames.append(game)

  if sortAlg == "quick":
    sortedSimilarGames = quicksort(similarGames, sortBy, Ascend)
  elif sortAlg == "merge":
    a = 5
    #put in merge
  elif sortAlg == "shell":
    a = 5
    #put in shell
  
  return sortedSimilarGames
  
def rank_from_game(gameTitle, publisherNum, developerNum, platformNum, genreNum, sortBy, sortAlg, Ascend):
  # make full list of games
  frame = pd.read_csv("/content/Video_Games_Sales_as_at_22_Dec_2016 2.csv")
  frame = frame.fillna(-1)

  listOfData = []
  for i in range(frame.shape[0]):
    listOfData.append(frame.iloc[i])
  unsortedList = listOfData
  # make map of games (dict)
  nameList = []
  gameList = [] 
  for game in listOfData:
    nameList.append(str(game["Name"]))
    gameList.append(game)
  zippedFile = zip(nameList, gameList)
  gameMap = dict(zippedFile)
  return rank_games(gameMap[gameTitle]["Publisher"], publisherNum,  gameMap[gameTitle]["Developer"], developerNum, gameMap[gameTitle]["Platform"], platformNum, gameMap[gameTitle]["Genre"], genreNum,sortBy, sortAlg, Ascend)
  



#rank_games("Nintendo", 0, "taco", 0, "NES", 0, "Platform", 0, "Global_Sales", "quick", True)
#rank_from_game("Super Mario Bros.", 5, 1, 3, 2, "Global_Sales", "quick", False)